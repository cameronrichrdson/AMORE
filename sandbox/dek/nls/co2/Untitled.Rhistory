library(argoFloats)
index <- getIndex()
from <- as.POSIXct("2018-01-01", tz="UTC")
to <- as.POSIXct("2019-01-01", tz="UTC")
subset1 <- subset(index, time=list(from=from, to=to))
plot(subset, which="map")
subset <- subset(index, time=list(from=from, to=to))
subset <- subset(index, time=list(from=from, to=to))
sub <- subset(index, time=list(from=from, to=to))
plot(sub, which="map")
plot(sub, which="map", pch=1)
plot(sub, which="map", pch=1, cex=0.2, col=1, bathy=FALSE)
plot(sub, which="map", pch=1, cex=0.1, col=1, bathy=FALSE)
plot(sub, which="map", pch=1, cex=0.1, col=1)#, bathy=FALSE)
plot(sub, which="map", pch=1, cex=0.1, col=rgb(0,0,0,0.1))#, bathy=FALSE)
plot(sub, which="map", pch=20, cex=0.2, col=rgb(0,0,0,0.1))#, bathy=FALSE)
plot(sub, which="map", pch=20, cex=0.2, col=rgb(0,0,0,0.2))#, bathy=FALSE)
plot(sub, which="map", bathy=FALSE, pch=20, cex=0.2)#, col=rgb(0,0,0,0.2))#, bathy=FALSE)
plot(sub, which="map", bathy=FALSE, pch=20, cex=0.2, col=1)#, col=rgb(0,0,0,0.2))#, bathy=FALSE)
plot(sub, which="map", bathy=FALSE, pch=20, cex=0.05, col=1)#, col=rgb(0,0,0,0.2))#, bathy=FALSE)
pdf("argo2018.pdf")
plot(sub, which="map", bathy=FALSE, pch=20, cex=0.05, col=1)#, col=rgb(0,0,0,0.2))#, bathy=FALSE)
dev.off()
q()
nvimcom:::source.and.clean("/Users/kelley/ctd.R.tmp.R")
nameLines
nvimcom:::source.and.clean("/Users/kelley/ctd.R.tmp.R")
d[1,]
length(names)
names
nvimcom:::source.and.clean("/Users/kelley/ctd_ssda.R.tmp.R")
plotScan(d)
dev.off()
plotScan(d)
plot(ctdTrim(d))
nvimcom:::source.and.clean("/Users/kelley/weather.R.tmp.R", echo = TRUE, spaced = TRUE, encoding = "UTF-8")
names(ds)
library(oce)
f <- "~/Downloads/en_climate_daily_NS_8202251_2023_P1D.csv"
d <- read.csv(f)
d$time <- ISOdatetime(d$Year, d$Month, d$Day, 0, 0, 0, tz="UTC")
ds <- subset(d, is.finite(d[["Mean.Temp...C."]]))
Temp <- ds[["Mean.Temp...C."]]
nvimcom:::source.and.clean("/Users/kelley/weather.R.tmp.R", echo = TRUE, spaced = TRUE, encoding = "UTF-8")
nvimcom:::source.and.clean("/Users/kelley/weather.R.tmp.R", echo = TRUE, spaced = TRUE, encoding = "UTF-8")
names(ds)
gust <- ds[["Spd.of.Max.Gust..km.h."]] * 3600 / 1000 # m/s
hist(gust)
gust <- ds[["Spd.of.Max.Gust..km.h."]] * 1000 / 3600 # m/s
hist(gust)
flux <- rhoa * CH * CPa * gust * temperature - Tocean
nvimcom:::source.and.clean("/Users/kelley/weather.R.tmp.R", echo = TRUE, spaced = TRUE, encoding = "UTF-8")
q()
x <- c(1, 3, 5)
x
x <- 1:100
x
x <- seq(0, 2*pi, pi/16)
x
y <- sin(x)
plot(x, y)
plot(x, y)
plot(x, y, type="l")
grid()
lines(x, y)
lines(x, y, col=2)
lines(x, y, col=2, lwd=3)
par(mar)
par("mar")
par(mar=c(3,3,1,1))
plot(x, y, type="l")
par(mar=c(3,3,1,1), mgp=c(2,0.7,0))
plot(x, y, type="l")
x <- 1:10
y <- 2 + 3*x
plot(x,y)
?rnorm
rnorm(x)
rnorm(x, mean=0, sd=0.1)
noise <- rnorm(x, mean=0, sd=0.1)
plot(x, y+noise)
noise <- rnorm(x, mean=0, sd=1)
plot(x, y+noise)
noise <- rnorm(x, mean=0, sd=3)
plot(x, y+noise)
y <- y + noise
plot(x, y)
?lm
lm(y ~ x)
m <- lm(y ~ x)
m <- lm(y ~ x)
summary(m)
class(m)
plot(m)
par(mfrow=c(2,2))
plot(m)
dev.new()
dev.new()
dev.new()
dev.new()
par(mfrow=c(2,2))
plot(m)
summary(m)
coef(m)
confint(m)
plot(x,y)
plot(x,y)
mtext("dan is cool")
plot(x,y)
mtext(paste("model:", coef(m)[1], "+", coef(m)[2], "*x"))
mtext(paste("model:", round(coef(m)[1],2), "+", round(coef(m)[2],2), "*x"))
plot(x,y)
mtext(paste("model:", round(coef(m)[1],2), "+", round(coef(m)[2],2), "*x"))
abline(m)
abline(a=1, b=3)
abline(a=1, b=3, col=2)
plot(x,y)
mtext(paste("model:", round(coef(m)[1],2), "+", round(coef(m)[2],2), "*x"))
abline(a=1, b=3, lty=2)
abline(m)
grid()
x <- seq(0, 10, length.out=50)
A<-1
B <- 2
y <- A*x*exp(-x/B)
plot(x, y)
B <- 5
lines(x, A*x*exp(-x/B))
plot(x, A*x*exp(-x/B))
?nls
nls(y~A*x*exp(-x/B))
nls(y~A*x*exp(-x/B), start=list(A=1,B=4))
plot(x, y)
plot(x, y, type='l')
y <- y + rnorm(x, sd=0.05)
plot(x, y, type='l')
plot(x, y, type='p')
nls(y~A*x*exp(-x/B), start=list(A=1,B=4))
nls(y~A*x*exp(-x/B), start=list(A=1,B=4))
nls(y~A*x*exp(-x/B), start=list(A=1,B=40))
m <- nls(y~A*x*exp(-x/B), start=list(A=1,B=40))
m <- nls(y~A*x*exp(-x/B), start=list(A=1,B=4))
summary(m)
coef(m)
confint(m)
predict(m)
ypred <- predict(m)
lines(x, ypred)
savehistory("~/Untitled.Rhistory")
